version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: fastapi_auth_db
    environment:
      POSTGRES_DB: fastapi_auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: nurabi12
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create_database.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - fastapi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fastapi_user -d fastapi_auth"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_auth_backend
    environment:
      DATABASE_URL: postgresql://fastapi_user:secure_password_123@db:5432/fastapi_auth
      SECRET_KEY: your-super-secret-key-change-this-in-production-docker
      ENVIRONMENT: production
      CORS_ORIGINS: "http://localhost:3000,http://127.0.0.1:3000"
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - fastapi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend (опционально)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: fastapi_auth_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - fastapi_network
    restart: unless-stopped
    profiles:
      - frontend

  # Nginx Reverse Proxy (для продакшена)
  nginx:
    image: nginx:alpine
    container_name: fastapi_auth_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - fastapi_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  fastapi_network:
    driver: bridge
